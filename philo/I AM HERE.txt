In process:
Make norm happy again
- Max 5 functions per file (done)
- check lentgh of each function
-check that .h all is used functions and headers
-check that all not included in .h file are static
-test all again
Norm happy with:
- args
- args_util
- init.c
- life_cycle
- actions
- monitor
- output
- helper
- cleanup_error
- clean_up_utils
- simulation


NEXT
Testing:
Implement error handling for current things: including if time is too big, check in between if philo has died.
5. Correct the output formatting in which is printed, I am using printf

9. Debug in make? 

12. check edge cases (example: 2 400 4000000 200 2 the program freezes for a long time even if one philo is already died.  )

check all functions in .h are used
checkk if colors will be used if not delet .h check is not connected
ceck statics are ok and the rest in .h

Fixed data race of start_time. test case 1.  valgrind --tool=helgrind ./philo 5 800 200 200

ALLWAYS
test


Done:
init_cross_mutex
init_forks
init_program with args
init_philos
printf_mutex
set-up simulation
life cycle:
    basic philo_sleep
    basic philo_think
    think after sleep
include the struct arg_parse into t_program to use the int *arr
init_threads
1. Full sleep function
2. Full thinking function
3. Full eat function
Logic to handl forks per each philo
4. set the order of actions per philo (odd or even)
Set termination condition:
    -end_condition function
    -sim_stop
    -kill_philo
    -clean_up
    -lifes monitor
    -make general the mutex error of forks to all
    -check_end_conditions
Make norm happy splitting into files
Mind map
Implement clean_up_program
10. Set-up copilots
Check valgrind so far with different cases work correctly only for low resources 60 60 60 with diff amount of philo 2 to 200, like (30, 15,8, 10, 25, 56, 76, 99) and:
test done:
valgrind ./philo 3 60 60 60 ok
valgrind ./philo 4 60 60 60 ok
valgrind ./philo 5 60 60 60 ok
tested with 20 and 55
valgrind ./philo 100 60 60 60 ok
valgrind ./philo 30 60 60 60 ok
valgrind ./philo 200 60 60 60 ok
- test 2 philo with more resources and again with 60 60 60 to check output (also tested with valgrind)
./philo 2 200 100 100. died in 200
./philo 2 205 100 100 none died
./philo 2 250 100 100 none died
./philo 2 300 100 100 5 all eaten
- fixed case 4 410 200 200
- outputs checked
11. Handle case with 1 philo
fixed time, case: ./philo 200 60 60 60 initialization changed
check if ending the program with ctrl+c needs to be handled. No this a signal to abruptly end the program so the clean-Up_program in the main might not be reached.
Valgrind for memory leaks checked and passed
-fixed all test case valgrind helgrind
- al drd passed as weel memory leaks test cases 
- do the others checks testing con helgrind drd and time then norm and all test again with leaks too
-check out put: sometimes the program begins in 1 instead of 0 (in the first). Timestamp
-valgrind with errors


WISH to
check if all the structs are malloc correctly and !malloc error



LEFT FORK = index i 
RIGHT FORK = index (i + 1)%N then the last philo will take first the right