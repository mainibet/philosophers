In process:

-check out put: sometimes the program begins in 1 instead of 0 (in the first)




NEXT
check if ending the program with ctrl+c needs to be handled
Implement error handling for current things: including if time is too big, check in between if philo has died.
Avoid deadlocks
Avoid race..
check output (no valgrind it might change it), get time stamp correct it was working beofre: no takng forks after died.
Check if the check condition can be done in the routines instead of inside the functions
make norm happy again
life cycle:
check how to debu threads in gdb 
check if joining threads is ok
check valgrind with errors 

CHECK THE THREADS MANAGEMENT WITH COMMAND SUGGESTED
5. Correct the output formatting in which is printed, I am using printf

6. Make the functions to grab both forks before eating

9. Debug in make? 

10. Set-up copilot

12. check edge cases (example: 2 400 4000000 200 2 the program freezes for a long time even if one philo is already died.  )

check all functions in .h are used
checkk if colors will be used if not delet .h check is not connected
ceck statics are ok and the rest in .h

ALLWAYS
test


Done:
init_cross_mutex
init_forks
init_program with args
init_philos
printf_mutex
set-up simulation
life cycle:
    basic philo_sleep
    basic philo_think
    think after sleep
include the struct arg_parse into t_program to use the int *arr
init_threads
1. Full sleep function
2. Full thinking function
3. Full eat function
Logic to handl forks per each philo
4. set the order of actions per philo (odd or even)
Set termination condition:
    -end_condition function
    -sim_stop
    -kill_philo
    -clean_up
    -lifes monitor
    -make general the mutex error of forks to all
    -check_end_conditions
Make norm happy splitting into files
Mind map
Implement clean_up_program

Check valgrind so far with different cases work correctly only for low resources 60 60 60 with diff amount of philo 2 to 200, like (30, 15,8, 10, 25, 56, 76, 99) and:
test done:
valgrind ./philo 3 60 60 60 ok
valgrind ./philo 4 60 60 60 ok
valgrind ./philo 5 60 60 60 ok
tested with 20 and 55
valgrind ./philo 100 60 60 60 ok
valgrind ./philo 30 60 60 60 ok
valgrind ./philo 200 60 60 60 ok
- test 2 philo with more resources and again with 60 60 60 to check output (also tested with valgrind)
./philo 2 200 100 100. died in 200
./philo 2 205 100 100 none died
./philo 2 250 100 100 none died
./philo 2 300 100 100 5 all eaten
- fixed case 4 410 200 200
- outputs checked
11. Handle case with 1 philo
fixed time, case: ./philo 200 60 60 60 initialization changed

WISH to
check if all the structs are malloc correctly and !malloc error



LEFT FORK = index i 
RIGHT FORK = index (i + 1)%N then the last philo will take first the right