In process:
fixing issues: case 2 philos (./philo 2 60 60 60)
-2nd philo only is able to think and not more
- pirnting when one is death: ./philo 100 60 60 60
- both philos should be able to do the full life cycle
- some times philo 1 reach to sleep but sometimes no
-check out put: sometimes the program begins in 1 instead of 0 (in the first)
test done:
valgrind ./philo 3 60 60 60 ok
valgrind ./philo 4 60 60 60 ok
valgrind ./philo 5 60 60 60 ok
tested with 20 and 55
valgrind ./philo 100 60 60 60 ok
valgrind ./philo 30 60 60 60 error

common error:
==725400== Thread 32:
==725400== Conditional jump or move depends on uninitialised value(s)
==725400==    at 0x402901: check_life (monitor.c:26)
==725400==    by 0x40280D: life_monitor (monitor.c:81)
==725400==    by 0x4905AC2: start_thread (pthread_create.c:442)
==725400==    by 0x4996A03: clone (clone.S:100)
==725400== 

NEXT
Implement error handling for current things: including if time is too big, check in between if philo has died.
Avoid deadlocks
Avoid race..
check output, get time stamp correct it was working beofre: no takng forks after died.
Check if the check condition can be done in the routines instead of inside the functions
life cycle:
check how to debu threads in gdb 
check if joining threads is ok

5. Correct the output formatting in which is printed, I am using printf

6. Make the functions to grab both forks before eating

9. Debug in make

10. Set-up copilot

11. Handle case with 1 philo

12. check edge cases (example: 2 400 4000000 200 2 the program freezes for a long time even if one philo is already died.  )


ALLWAYS
test


Done:
init_cross_mutex
init_forks
init_program with args
init_philos
printf_mutex
set-up simulation
life cycle:
    basic philo_sleep
    basic philo_think
    think after sleep
include the struct arg_parse into t_program to use the int *arr
init_threads
1. Full sleep function
2. Full thinking function
3. Full eat function
Logic to handl forks per each philo
4. set the order of actions per philo (odd or even)
Set termination condition:
    -end_condition function
    -sim_stop
    -kill_philo
    -clean_up
    -lifes monitor
    -make general the mutex error of forks to all
    -check_end_conditions
Make norm happy splitting into files
Mind map
Implement clean_up_program

WISH to
check if all the structs are malloc correctly and !malloc error



LEFT FORK = index i 
RIGHT FORK = index (i + 1)%N then the last philo will take first the right